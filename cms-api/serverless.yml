service: kapp-cms-api

plugins:
  - serverless-offline
  - serverless-mocha-plugin

provider:
  region: ap-southeast-1
  name: aws
  runtime: nodejs10.x
  memorySize: 256
  versionFunctions: false
  timeout: 30
  environment: ${file(env.yml):${self:custom.stage}}
  websocketApiRouteSelectionExpression: $request.body.action
  vpc:
    securityGroupIds:
      - ${file(env.yml):${self:custom.stage}.VPC_SECURITY_GROUP}
    subnetIds:
      - ${file(env.yml):${self:custom.stage}.VPC_SUBNET_1}
      - ${file(env.yml):${self:custom.stage}.VPC_SUBNET_2}
  stackTags:
    ProjectCode: "CMS"
    SupportContact: "Stratpoint"
    # Name: CMS-Lambda-CF-${file(env.yml):${self:custom.stage}}
  role:  ${file(env.yml):${self:custom.stage}.ROLE_ARN}

custom:
  stage: ${opt:stage, self:provider.stage}

functions:
  app:
    handler: src/app-serverless.handler
    events:
      - http: 
          path: /{proxy+}
          method: any
          cors: true
          # authorizer:
          #   arn: arn:aws:cognito-idp:ap-southeast-1:${file(env.yml):${self:custom.stage}.AWS_ACCOUNT}:userpool/${file(env.yml):${self:custom.stage}.REGION}_${file(env.yml):${self:custom.stage}.COGNITO_POOL_ID}

  autocomplete:
    handler: src/handler.location
    events:
      - http:
          path: /location/autocomplete
          method: post
          cors: true
  tags:
    handler: src/handler.smartTags
    events:
      - http:
          path: /smart/tags
          method: post
          cors: true
  userSeeds:
    handler: src/handler.userSeeds
  cron: 
    handler: src/cron.scheduled
    events:
      - schedule: 
          rate: cron(0/10 * * * ? *)
          enabled: true

  socketConnect:
    handler: src/socket.connect
    events:
      - websocket:
          route: $connect
  socketDisconnect:
    handler: src/socket.disconnect
    events:
      - websocket:
          route: $disconnect
  socketDefault:
    handler: src/socket.default
    events:
      - websocket:
          route: $default
  socketNotify:
    handler: src/socket.notify
    events:
      - websocket:
          route: NOTIFY

  # notificationConnectionHandler:
  #   handler: src/notifications.connectionHandler
  #   events:
  #     - websocket:
  #         route: $connect
  #     - websocket:
  #         route: $disconnect
  # defaultHandler:
  #   handler: src/notifications.default
  #   events:
  #     - websocket:
  #         route: $default
  # notify:
  #   handler: src/notifications.notify
  #   events:
  #     - websocket:
  #         route: notify 
          
  # updateClient:
  #   handler: src/notifications.updateClient
  #   events:
  #     - http:
  #         path: /update-client
  #         method: post
  #         cors: true